
// https://codingbat.com/java/Map-2
public class Map2 {

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, Integer> word0(String[] strings) {
        Map<String, Integer> map = new HashMap();
        for (String s : strings) {
            map.put(s, 0);
        }
        return map;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, Integer> wordLen(String[] strings) {
        Map<String, Integer> map = new HashMap();
        Arrays.asList(strings).forEach(s -> map.put(s, s.length()));
        return map;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, String> pairs(String[] strings) {
        Map<String, String> map = new HashMap<>();
        Arrays.asList(strings)
                .forEach(s -> map.put(s.substring(0, 1), s.substring(s.length() - 1, s.length())));
        return map;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, Integer> wordCount(String[] strings) {
        Map<String, Integer> map = new HashMap();
        for (String s : strings) {
            String tmp = s;
            if (map.containsKey(tmp)) {
                int count = map.get(tmp);
                map.put(tmp, count + 1);
            } else
                map.put(tmp, 1);
        }
        return map;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, String> firstChar(String[] strings) {
        Map<String, String> map = new HashMap<String, String>();
        for (int i = 0; i < strings.length; i++) {
            String key = String.valueOf(strings[i].charAt(0));
            if (map.containsKey(key)) {
                String val = map.get(key) + strings[i];
                map.put(key, val);
            } else {
                map.put(key, strings[i]);
            }
        }
        return map;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public String wordAppend(String[] strings) {
        Map<String, Integer> map = new HashMap();
        String string = "";
        for (String s : strings) {
            String key = s;

            if (map.containsKey(key)) {
                int value = map.get(key);
                value++;
                if (value % 2 == 0)
                    string += key;
                map.put(key, value);
            } else
                map.put(key, 1);
        }
        return string;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public Map<String, Boolean> wordMultiple(String[] strings) {
        Map<String, Integer> stringCount = new HashMap();
        Map<String, Boolean> mapBoolean = new HashMap();
        for (String s : strings) {
            String key = s;
            if (stringCount.containsKey(key)) {
                int count = stringCount.get(key);
                count++;
                stringCount.put(key, count);
            } else {
                stringCount.put(key, 1);
            }
            mapBoolean.put(key, stringCount.get(key) >= 2);
        }
        return mapBoolean;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public String[] allSwap(String[] strings) {
        Map<String, Integer> map = new HashMap();
        for (int i = 0; i < strings.length; i++) {
            if (map.containsKey(strings[i].charAt(0) + "")) {
                String string = strings[i];
                strings[i] = strings[map.get(strings[i].charAt(0) + "")];
                strings[map.get(strings[i].charAt(0) + "")] = string;
                map.remove(strings[i].charAt(0) + "");
            } else
                map.put(strings[i].charAt(0) + "", i);
        }
        return strings;
    }

    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //    //
    public String[] firstSwap(String[] strings) {
        Map<String, Integer> map = new HashMap();
        for (int i = 0; i < strings.length; i++) {
            String string = String.valueOf(strings[i].substring(0, 1));
            if (map.containsKey(string)) {
                int value = map.get(string);
                if (value == -1)
                    continue;
                int pos = map.get(string);
                String temp = strings[pos];
                strings[pos] = strings[i];
                strings[i] = temp;
                map.put(string, -1);
            } else
                map.put(string, i);
        }
        return strings;
    }

}
